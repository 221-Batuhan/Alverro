// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String?
  role          Role     @default(CUSTOMER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id           String      @id @default(cuid())
  slug         String      @unique
  name         String
  description  String
  composition  String?
  images       Json
  priceCents   Int
  stock        Int         @default(0)
  colors       String[]
  sizes        String[]
  categoryId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  orderItems   OrderItem[]
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  status       OrderStatus @default(PENDING)
  totalCents   Int
  paymentMethod String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]

  shipping     Address?    @relation("ShippingAddresses", fields: [shippingId], references: [id])
  shippingId   String?
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int      @default(1)
  priceCents Int
  size       String?
  color      String?
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  line1     String
  line2     String?
  city      String
  state     String?
  postal    String
  country   String
  phone     String?
  orders    Order[]  @relation("ShippingAddresses")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

enum Role {
  CUSTOMER
  ADMIN
}
